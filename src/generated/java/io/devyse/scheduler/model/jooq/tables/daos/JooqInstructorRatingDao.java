/**
 * This class is generated by jOOQ
 */
package io.devyse.scheduler.model.jooq.tables.daos;


import io.devyse.scheduler.model.jooq.tables.InstructorRating;
import io.devyse.scheduler.model.jooq.tables.pojos.JooqInstructorRating;
import io.devyse.scheduler.model.jooq.tables.records.InstructorRatingRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqInstructorRatingDao extends DAOImpl<InstructorRatingRecord, JooqInstructorRating, Integer> {

	/**
	 * Create a new JooqInstructorRatingDao without any configuration
	 */
	public JooqInstructorRatingDao() {
		super(InstructorRating.INSTRUCTOR_RATING, JooqInstructorRating.class);
	}

	/**
	 * Create a new JooqInstructorRatingDao with an attached configuration
	 */
	public JooqInstructorRatingDao(Configuration configuration) {
		super(InstructorRating.INSTRUCTOR_RATING, JooqInstructorRating.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(JooqInstructorRating object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>ID IN (values)</code>
	 */
	public List<JooqInstructorRating> fetchById(Integer... values) {
		return fetch(InstructorRating.INSTRUCTOR_RATING.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>ID = value</code>
	 */
	public JooqInstructorRating fetchOneById(Integer value) {
		return fetchOne(InstructorRating.INSTRUCTOR_RATING.ID, value);
	}

	/**
	 * Fetch records that have <code>INSTRUCTOR_ID IN (values)</code>
	 */
	public List<JooqInstructorRating> fetchByInstructorId(Integer... values) {
		return fetch(InstructorRating.INSTRUCTOR_RATING.INSTRUCTOR_ID, values);
	}

	/**
	 * Fetch records that have <code>RATING IN (values)</code>
	 */
	public List<JooqInstructorRating> fetchByRating(Double... values) {
		return fetch(InstructorRating.INSTRUCTOR_RATING.RATING, values);
	}

	/**
	 * Fetch records that have <code>DESCRIPTION IN (values)</code>
	 */
	public List<JooqInstructorRating> fetchByDescription(String... values) {
		return fetch(InstructorRating.INSTRUCTOR_RATING.DESCRIPTION, values);
	}
}
