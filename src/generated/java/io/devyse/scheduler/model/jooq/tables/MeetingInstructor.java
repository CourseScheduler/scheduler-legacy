/**
 * This class is generated by jOOQ
 */
package io.devyse.scheduler.model.jooq.tables;


import io.devyse.scheduler.model.jooq.App;
import io.devyse.scheduler.model.jooq.Keys;
import io.devyse.scheduler.model.jooq.tables.records.MeetingInstructorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeetingInstructor extends TableImpl<MeetingInstructorRecord> {

	private static final long serialVersionUID = 117128116;

	/**
	 * The reference instance of <code>APP.MEETING_INSTRUCTOR</code>
	 */
	public static final MeetingInstructor MEETING_INSTRUCTOR = new MeetingInstructor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MeetingInstructorRecord> getRecordType() {
		return MeetingInstructorRecord.class;
	}

	/**
	 * The column <code>APP.MEETING_INSTRUCTOR.ID</code>.
	 */
	public final TableField<MeetingInstructorRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>APP.MEETING_INSTRUCTOR.MEETING_ID</code>.
	 */
	public final TableField<MeetingInstructorRecord, Integer> MEETING_ID = createField("MEETING_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>APP.MEETING_INSTRUCTOR.INSTRUCTOR_ID</code>.
	 */
	public final TableField<MeetingInstructorRecord, Integer> INSTRUCTOR_ID = createField("INSTRUCTOR_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>APP.MEETING_INSTRUCTOR</code> table reference
	 */
	public MeetingInstructor() {
		this("MEETING_INSTRUCTOR", null);
	}

	/**
	 * Create an aliased <code>APP.MEETING_INSTRUCTOR</code> table reference
	 */
	public MeetingInstructor(String alias) {
		this(alias, MEETING_INSTRUCTOR);
	}

	private MeetingInstructor(String alias, Table<MeetingInstructorRecord> aliased) {
		this(alias, aliased, null);
	}

	private MeetingInstructor(String alias, Table<MeetingInstructorRecord> aliased, Field<?>[] parameters) {
		super(alias, App.APP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<MeetingInstructorRecord, Integer> getIdentity() {
		return Keys.IDENTITY_MEETING_INSTRUCTOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MeetingInstructorRecord> getPrimaryKey() {
		return Keys.MEETING_INSTRUCTOR_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MeetingInstructorRecord>> getKeys() {
		return Arrays.<UniqueKey<MeetingInstructorRecord>>asList(Keys.MEETING_INSTRUCTOR_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<MeetingInstructorRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<MeetingInstructorRecord, ?>>asList(Keys.MEETING_INSTRUCTOR_FKEY_MEETING_ID, Keys.MEETING_INSTRUCTOR_FKEY_INSTRUCTOR_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingInstructor as(String alias) {
		return new MeetingInstructor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public MeetingInstructor rename(String name) {
		return new MeetingInstructor(name, null);
	}
}
