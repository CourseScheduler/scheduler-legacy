/**
 * This class is generated by jOOQ
 */
package io.devyse.scheduler.model.jooq.tables;


import io.devyse.scheduler.model.jooq.App;
import io.devyse.scheduler.model.jooq.Keys;
import io.devyse.scheduler.model.jooq.tables.records.InstructorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instructor extends TableImpl<InstructorRecord> {

	private static final long serialVersionUID = 365866669;

	/**
	 * The reference instance of <code>APP.INSTRUCTOR</code>
	 */
	public static final Instructor INSTRUCTOR = new Instructor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<InstructorRecord> getRecordType() {
		return InstructorRecord.class;
	}

	/**
	 * The column <code>APP.INSTRUCTOR.ID</code>.
	 */
	public final TableField<InstructorRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>APP.INSTRUCTOR.NAME</code>.
	 */
	public final TableField<InstructorRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaulted(true), this, "");

	/**
	 * The column <code>APP.INSTRUCTOR.TERM_DATA_SET_ID</code>.
	 */
	public final TableField<InstructorRecord, Integer> TERM_DATA_SET_ID = createField("TERM_DATA_SET_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>APP.INSTRUCTOR</code> table reference
	 */
	public Instructor() {
		this("INSTRUCTOR", null);
	}

	/**
	 * Create an aliased <code>APP.INSTRUCTOR</code> table reference
	 */
	public Instructor(String alias) {
		this(alias, INSTRUCTOR);
	}

	private Instructor(String alias, Table<InstructorRecord> aliased) {
		this(alias, aliased, null);
	}

	private Instructor(String alias, Table<InstructorRecord> aliased, Field<?>[] parameters) {
		super(alias, App.APP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<InstructorRecord, Integer> getIdentity() {
		return Keys.IDENTITY_INSTRUCTOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<InstructorRecord> getPrimaryKey() {
		return Keys.INSTRUCTOR_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<InstructorRecord>> getKeys() {
		return Arrays.<UniqueKey<InstructorRecord>>asList(Keys.INSTRUCTOR_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<InstructorRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<InstructorRecord, ?>>asList(Keys.INSTRUCTOR_FKEY_TERM_DATA_SET_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Instructor as(String alias) {
		return new Instructor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Instructor rename(String name) {
		return new Instructor(name, null);
	}
}
